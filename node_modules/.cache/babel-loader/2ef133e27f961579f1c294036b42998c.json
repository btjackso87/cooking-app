{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nexport const useFetch = (url, method = \"GET\") => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const postData = () => {};\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async () => {\n      setIsPending(true);\n      try {\n        const res = await fetch(url, {\n          signal: controller.signal\n        });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const data = await res.json();\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError('Could not fetch the data');\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      controller.abort();\n    };\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"Nv+1/iI0zq+2TB3Cnf0Mf/1lILU=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","method","_s","data","setData","isPending","setIsPending","error","setError","postData","controller","AbortController","fetchData","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","abort"],"sources":["/Users/btjackso/Desktop/react_tuts/cooking-ninja/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\"\n\nexport const useFetch = (url, method=\"GET\") => {\n  const [data, setData] = useState(null)\n  const [isPending, setIsPending] = useState(false)\n  const [error, setError] = useState(null)\n\n\n  const postData = () => {\n    \n  }\n\n  useEffect(() => {\n    const controller = new AbortController()\n\n    const fetchData = async () => {\n      setIsPending(true)\n      \n      try {\n        const res = await fetch(url, { signal: controller.signal })\n        if(!res.ok) {\n          throw new Error(res.statusText)\n        }\n        const data = await res.json()\n\n        setIsPending(false)\n        setData(data)\n        setError(null)\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\")\n        } else {\n          setIsPending(false)\n          setError('Could not fetch the data')\n        }\n      }\n    }\n\n    fetchData()\n\n    return () => {\n      controller.abort()\n    }\n\n  }, [url])\n\n  return { data, isPending, error }\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,QAAQ,GAAGA,CAACC,GAAG,EAAEC,MAAM,GAAC,KAAK,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAGxC,MAAMY,QAAQ,GAAGA,CAAA,KAAM,CAEvB,CAAC;EAEDX,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BN,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF,MAAMO,GAAG,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAE;UAAEe,MAAM,EAAEL,UAAU,CAACK;QAAO,CAAC,CAAC;QAC3D,IAAG,CAACF,GAAG,CAACG,EAAE,EAAE;UACV,MAAM,IAAIC,KAAK,CAACJ,GAAG,CAACK,UAAU,CAAC;QACjC;QACA,MAAMf,IAAI,GAAG,MAAMU,GAAG,CAACM,IAAI,CAAC,CAAC;QAE7Bb,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACD,IAAI,CAAC;QACbK,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;UAC7BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACtC,CAAC,MAAM;UACLjB,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAAC,0BAA0B,CAAC;QACtC;MACF;IACF,CAAC;IAEDI,SAAS,CAAC,CAAC;IAEX,OAAO,MAAM;MACXF,UAAU,CAACc,KAAK,CAAC,CAAC;IACpB,CAAC;EAEH,CAAC,EAAE,CAACxB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEG,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAAAL,EAAA,CA7CYH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}